import random
import numpy as np
from numpy import linalg

""" Вычислить сумму знакопеременного ряда (|х^(2n)|)/(2n)!, где х-матрица ранга к
 (к и матрица задаются случайным образом), n - номер слагаемого.
 Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой.
 У алгоритма д.б. линейная сложность. Операция умножения –поэлементная."""


print("\n*****Лабораторная работа №2*****")


# Задаем размер матрицы
k = int(input("Введите количество строк (столбцов) квадратной матрицы в интервале от 2 до 100:"))
while k < 1 or k > 100:
    k = int(input("\nВы ввели неверное число"
                      "\nВведите количество строк (столбцов) квадратной матрицы в интервале от 6 до 100:"))


# Задаем матрицу
Matrix = []
for i in range(k):
    Matrix.append([0] * k)

# Заполняем матрицу
for i in range(k):
    for j in range(k):
        Matrix[i][j] = random.randint(-10, 10)

# Выводим матрицу
print("Полученная матрица:")
for i in Matrix:  # делаем перебор всех строк матрицы
    for j in i:  # перебираем все элементы в строке
        print("%5d" % j, end=' ')
    print()

# Находим ранг матрицы
rank = np.linalg.matrix_rank(Matrix)
print("Ранг матрицы:", rank)

# Вводим желаемую точность вычисления знаков после запятой
t = int(input('Введите количество знаков после запятой в результате вычисления:'))
t = 0.1 ** t

# Номер слагаемого
n = 1

# Значение факториала при n = 1
factorial = 2

# Полученная сумма
summa = 0

# Переменная для проверки точности
per = 0

# Результат проверки на точность
rez = 1

# Вычисления
while abs(rez) > t:
    per += summa
    summa += (np.linalg.det(linalg.matrix_power(Matrix, 2 * n))) / factorial
    n += 1
    factorial = factorial * (2*n) * (2*n - 1)
    rez = abs(per-summa)
    per = 0
    print('При n =', n-1, ':', summa, ' ', rez)
print('Сумма знакопеременного ряда:', summa)